<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-06-25T13:57:25-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Keith Matthews</title><subtitle>This is a site I plan on using to showcase my work and projects im involved with.</subtitle><entry><title type="html">Controller</title><link href="http://localhost:4000/2024/06/25/controller.html" rel="alternate" type="text/html" title="Controller" /><published>2024-06-25T00:00:00-07:00</published><updated>2024-06-25T00:00:00-07:00</updated><id>http://localhost:4000/2024/06/25/controller</id><content type="html" xml:base="http://localhost:4000/2024/06/25/controller.html"><![CDATA[<h2 id="custom-hid-device-design">Custom HID device design</h2>

<p>This project was focused on designing and building a custom controller for use at my job and to learn how to use PCB design software.</p>

<p><a href="https://github.com/kmatthews123/Controller">GitHub - kmatthews123/Controller: Controller designed by me with code from Joystick_XL library</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Custom HID device design This project was focused on designing and building a custom controller for use at my job and to learn how to use PCB design software. GitHub - kmatthews123/Controller: Controller designed by me with code from Joystick_XL library]]></summary></entry><entry><title type="html">Octodocker</title><link href="http://localhost:4000/2024/06/25/octodocker.html" rel="alternate" type="text/html" title="Octodocker" /><published>2024-06-25T00:00:00-07:00</published><updated>2024-06-25T00:00:00-07:00</updated><id>http://localhost:4000/2024/06/25/octodocker</id><content type="html" xml:base="http://localhost:4000/2024/06/25/octodocker.html"><![CDATA[<h2 id="why-use-docker-for-3d-printing">Why use docker for 3d printing?</h2>

<p>Several years ago, I was told about docker while commiserating with a freind about the lack of raspberry pi devices or at least their massivly blown up price during the pandemic. My friend pointed out docker and it opened a world up. after lots of hours watching youtube videos, digging into guides and setup documentation and poking at some basic containers using the single rasperry pi I had in my posession I started my project. At the time I had a few things already running on that pi and I was going to use it to also host octoprint to help me in managing my ender 3 pro. While this would have been a good enough use case and I will get into some of the things I had to figure out to make this single install work, it became even more important when I gained an additional 3 3d printers from a friend. these machines, to be easily operated and maintaind also needed octoprint running. this was the true benifit of running octoprint in a container. Because this application is really light, while it is easier to install directly to an sd card and run it bare metal on a raspberry pi both because it requries connecting to usb and because it greatly simplifies connection to a camera for streaming (more on that later). From what I understand you can hook more than one usb up to a pi running octoprint bare metal but I havent seen many people use this method. I assume it is because octoprint really seems to be designed to run one printer. One rasperry pi for one printer at a time when a medium spec pi 4 was hanging out in the 200$ range if you could find them at all was a really steap ask. In retrospect a Pi 3 would have been cheaper and have run just fine but again, more on that later. When I set to adding the additional 3 printers to my fleet of machines, I started with first converting my original octoprint container from running off of a docker “one liner” and building a docker compose file for it. This process was really straight forward because the docker hub page for the octoprint app has a compose file right there. The things I had to add and modify were easy enough for the first machine, simply probe for and pass though the usb device and also give the web portal its own defined port. This process would become more dificult as I duplicated the docker compose file for the usb pass though which I will get to in a bit. the ports being duplicated was easy enough and I made things simple by using 4 adjacent ports with numbers 1-4 in order of the printers. As far as the usb connections go, the printers, running all at the same time are not capable of saturating the usb bus, and the main problem was that as you plug things in and un-plug things, the linux operating system will change the port numbers for each individual device. This is an issue because the decleration for which usb device bets passed into the docker container is static. it cannot tell the diffrence between two diffrent usb inputs as far as I can tell. I have a feeling that I could possibly figure out how to script a way of polling the 3d printer for some kind of finger print at the time of spinning up the docker container to grab the right usb device automaticly but I havent figured that out yet. for now what that means is each /dev/ttyusb gets passed into its own container correctly by simply shutting down all containers, unpluging all usb devices from the host system, and then adding the devices and starting the containers that corespond with that printer 1 at a time. this way the usb inputs are enumerated correctly to give each instance of octoprint the correct machine. this is a pretty hacky way of doing things but unless multiple 3d printers get unpluged at the same time it is pretty functional once setup.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Why use docker for 3d printing?]]></summary></entry><entry><title type="html">Projects Im Involved With</title><link href="http://localhost:4000/2024/06/25/projects-Im-involved-with.html" rel="alternate" type="text/html" title="Projects Im Involved With" /><published>2024-06-25T00:00:00-07:00</published><updated>2024-06-25T00:00:00-07:00</updated><id>http://localhost:4000/2024/06/25/projects-Im-involved-with</id><content type="html" xml:base="http://localhost:4000/2024/06/25/projects-Im-involved-with.html"><![CDATA[<h4 id="checkout-projects-im-involved-in">Checkout projects I’m involved in</h4>

<p>Robo Ruckus, I have asssited with testing, and development of alternative robotics platforms. I have also run many public displays of the robo ruckus games
<a href="https://www.roboruckus.com/">Robo Ruckus</a></p>

<p>Big Boat Energy, This project I worked on with a freind in bellingham, we designed and built a boat platform that can follow waypoint missions with minimal intervention.
<a href="https://github.com/BigBoatEnergy/boat-robot">Boatymcboatface</a></p>

<p>Raspberry Pi Club Jeopardy game, I assisted this group of BTC students by coming up a plethora of linux themed jeopardy questions. I also assisted with a hardware implementation to make deploying the game at an event.
<a href="https://github.com/btc-raspberrypiclub/jeopardy">Jeopardy</a></p>

<p>Ruby based Discord bot. this discord bot acts as the frontend for a Large Language model and allows users in a discord channel to interact with an “AI”. I assisted by testing the bot, and also adding the “nice message” function
<a href="https://github.com/joshbuker/discord-bot">Ruby Bot</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Checkout projects I’m involved in Robo Ruckus, I have asssited with testing, and development of alternative robotics platforms. I have also run many public displays of the robo ruckus games Robo Ruckus Big Boat Energy, This project I worked on with a freind in bellingham, we designed and built a boat platform that can follow waypoint missions with minimal intervention. Boatymcboatface Raspberry Pi Club Jeopardy game, I assisted this group of BTC students by coming up a plethora of linux themed jeopardy questions. I also assisted with a hardware implementation to make deploying the game at an event. Jeopardy Ruby based Discord bot. this discord bot acts as the frontend for a Large Language model and allows users in a discord channel to interact with an “AI”. I assisted by testing the bot, and also adding the “nice message” function Ruby Bot]]></summary></entry><entry><title type="html">Solartv</title><link href="http://localhost:4000/2024/06/25/solartv.html" rel="alternate" type="text/html" title="Solartv" /><published>2024-06-25T00:00:00-07:00</published><updated>2024-06-25T00:00:00-07:00</updated><id>http://localhost:4000/2024/06/25/solartv</id><content type="html" xml:base="http://localhost:4000/2024/06/25/solartv.html"><![CDATA[<p>Fixing a solar tv</p>

<p>This is a brief test article to explain how I was able to “fix” a “solar tv” that would normally be sold in Africa as best as I can tell. This tv has a drm lockout feature that uses the designers 12-volt power supply from a solar array and solar charge controller as the key to unlock the drm. As best as I can tell, either the 12-volt power supply has some kind of signal in the power that the tv can decode or there is a different cable used to unlock the tv assuming you have paid the company. For multiple reasons this bothers me so I took a bit of time to figure out what was going on here and how I could defeat it. I have a feeling that these TVs were purchased on Ali-express or a similar kind of site as it does not seem these things are sold normally in the US. I did not purchase these TVs but inherited them from a makerspace I was involved with, the story I got is someone got them off the back of a truck at burning man.</p>

<p>what first tipped me off to the tv having drm in the first place is that when turning on two of the several of these things I have access to they both had some strange behavior where the backlight would be on during initial power up, and then it would start flickering at a regular interval before shutting off altogether. at first this behavior looked like the tv was damaged and I put it aside and evaluated a second tv. When this second device exhibited the exact same behavior, I got very suspicious. I was powering the devices via a regular 12-volt dc barrel jack and adapter off the wall power. I knew that I was supplying enough current since the tv draws something like twelve volt thirteen watts and my 12-volt brick was rated for five amps of twelve volt, I tried with a second power supply that was rated for a similar power level. At this point I stopped and started googling the company that makes these things. I had help with this from my friend and we discovered that the manufacturer sells these devices as part of a solar electricity kit (more likely an addon to the base kits) in Africa. They have a payment plan system that I think is used to lock out users from their equipment if they do not have a current code. Id imagine that this lockout device is what’s used to plug the tv into power via the double sided 12 volt cable that came included with this machine, and then it sends some kind of handshake to the tv when powerup happens to verify you aren’t using just some random car battery and your sticking to their ecosystem. This sort of lockout is scummy in my opinion and it makes these TVs e-waste for me since I did not have the lockout device and no means of getting one outside of contacting the company, so I decided to keep digging. It turns out that this 12-volt tv is a pretty common piece of gear you can order from overseas. They seem useful for things like digital signage and storefronts where quality matters less than a variety mounting and power options for something that is going to display the same three things for its entire life. When I found a picture of the circuit boards in this style of 12-volt TVs, I decided to pop mine open as well and find out what was different.</p>

<p>Apon opening the tv I discovered that it appeared the main difference was the addition of a black PCB with the manufacturers name that brought in the “Inverter” wires (it’s all 12 volt so I’m not sure what’s getting “inverted” but that’s what the main board had as a label for that plug) and output 4 wires (2 black and 2 red and tied into the same plug) that traveled into the TVs body. I had a feeling these were the power wires for the backlight, but I was able to confirm this with a multimeter. during initial power up, the four wires showed a 9.75 - 10.25 DC potential over those two wires, the multimeter was a cheap one and the flickering was quick so the LEDs using the full twelve volts is not a huge leap. that power dropped off in time with the backlight going off on the monitor, so I was quite sure those four wires were for the LED backlight. The next step was to try and figure out how to defeat the lockout chip to get those LEDs on normally.</p>

<p>At this point I started poking around the little driver board that was between the tv backlight and the mainboard. This little board had several surface mount chips with one programable logic chip as its center. I was able to read the name of that chip, but I do not know enough to pull its code off. I also was working with a limited set of tools so ultimately; I focused on what was bringing the power into the board instead of trying to force the board itself to do something other than design. I probed the incoming eight “Inverter” wires from the main board and found that there were two that were carrying twelve volts directly from the power supply. There are other wires that are on and off at different voltage levels and for various times, these are used to tell the board what to do about power when the tv is plugged in but “turned off” via a remote or power button. This is because the mainboard is always powered and is always putting twelve volts out to the breakout “drm” board. My quick solution was to simply plug some jumpers between the twelve volts into the board and the LED plug. this did work but it does come with the drawback of the TVs backlight is always on. This is undesirable for obvious reasons in an off-grid type setup using something like solar or batteries but for my use case it does not matter. There is a compelling reason to get back in there and design some custom circuitry that could act to shut the tv on and off based on signal from the IR receiver but that is a problem for another day.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Fixing a solar tv This is a brief test article to explain how I was able to “fix” a “solar tv” that would normally be sold in Africa as best as I can tell. This tv has a drm lockout feature that uses the designers 12-volt power supply from a solar array and solar charge controller as the key to unlock the drm. As best as I can tell, either the 12-volt power supply has some kind of signal in the power that the tv can decode or there is a different cable used to unlock the tv assuming you have paid the company. For multiple reasons this bothers me so I took a bit of time to figure out what was going on here and how I could defeat it. I have a feeling that these TVs were purchased on Ali-express or a similar kind of site as it does not seem these things are sold normally in the US. I did not purchase these TVs but inherited them from a makerspace I was involved with, the story I got is someone got them off the back of a truck at burning man. what first tipped me off to the tv having drm in the first place is that when turning on two of the several of these things I have access to they both had some strange behavior where the backlight would be on during initial power up, and then it would start flickering at a regular interval before shutting off altogether. at first this behavior looked like the tv was damaged and I put it aside and evaluated a second tv. When this second device exhibited the exact same behavior, I got very suspicious. I was powering the devices via a regular 12-volt dc barrel jack and adapter off the wall power. I knew that I was supplying enough current since the tv draws something like twelve volt thirteen watts and my 12-volt brick was rated for five amps of twelve volt, I tried with a second power supply that was rated for a similar power level. At this point I stopped and started googling the company that makes these things. I had help with this from my friend and we discovered that the manufacturer sells these devices as part of a solar electricity kit (more likely an addon to the base kits) in Africa. They have a payment plan system that I think is used to lock out users from their equipment if they do not have a current code. Id imagine that this lockout device is what’s used to plug the tv into power via the double sided 12 volt cable that came included with this machine, and then it sends some kind of handshake to the tv when powerup happens to verify you aren’t using just some random car battery and your sticking to their ecosystem. This sort of lockout is scummy in my opinion and it makes these TVs e-waste for me since I did not have the lockout device and no means of getting one outside of contacting the company, so I decided to keep digging. It turns out that this 12-volt tv is a pretty common piece of gear you can order from overseas. They seem useful for things like digital signage and storefronts where quality matters less than a variety mounting and power options for something that is going to display the same three things for its entire life. When I found a picture of the circuit boards in this style of 12-volt TVs, I decided to pop mine open as well and find out what was different. Apon opening the tv I discovered that it appeared the main difference was the addition of a black PCB with the manufacturers name that brought in the “Inverter” wires (it’s all 12 volt so I’m not sure what’s getting “inverted” but that’s what the main board had as a label for that plug) and output 4 wires (2 black and 2 red and tied into the same plug) that traveled into the TVs body. I had a feeling these were the power wires for the backlight, but I was able to confirm this with a multimeter. during initial power up, the four wires showed a 9.75 - 10.25 DC potential over those two wires, the multimeter was a cheap one and the flickering was quick so the LEDs using the full twelve volts is not a huge leap. that power dropped off in time with the backlight going off on the monitor, so I was quite sure those four wires were for the LED backlight. The next step was to try and figure out how to defeat the lockout chip to get those LEDs on normally. At this point I started poking around the little driver board that was between the tv backlight and the mainboard. This little board had several surface mount chips with one programable logic chip as its center. I was able to read the name of that chip, but I do not know enough to pull its code off. I also was working with a limited set of tools so ultimately; I focused on what was bringing the power into the board instead of trying to force the board itself to do something other than design. I probed the incoming eight “Inverter” wires from the main board and found that there were two that were carrying twelve volts directly from the power supply. There are other wires that are on and off at different voltage levels and for various times, these are used to tell the board what to do about power when the tv is plugged in but “turned off” via a remote or power button. This is because the mainboard is always powered and is always putting twelve volts out to the breakout “drm” board. My quick solution was to simply plug some jumpers between the twelve volts into the board and the LED plug. this did work but it does come with the drawback of the TVs backlight is always on. This is undesirable for obvious reasons in an off-grid type setup using something like solar or batteries but for my use case it does not matter. There is a compelling reason to get back in there and design some custom circuitry that could act to shut the tv on and off based on signal from the IR receiver but that is a problem for another day.]]></summary></entry></feed>